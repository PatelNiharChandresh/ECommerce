// <auto-generated />
using ECommerce.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230824160258_AddingImageURLtoProducts")]
    partial class AddingImageURLtoProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 3,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 1,
                            Name = "Clothes"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 2,
                            Name = "Shoes"
                        });
                });

            modelBuilder.Entity("ECommerce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Author = "Ram",
                            CategoryId = 1,
                            Description = "sdklfshdnfjlksdh",
                            ISBN = "123ABCD",
                            ImageURL = "",
                            Price = 14.25,
                            Title = "Book1"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Shyam",
                            CategoryId = 3,
                            Description = "sdklfshdnfjlksdh",
                            ISBN = "456EFG",
                            ImageURL = "",
                            Price = 15.199999999999999,
                            Title = "Book2"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Sita",
                            CategoryId = 2,
                            Description = "sdklfshdnfjlksdh",
                            ISBN = "789HIJK",
                            ImageURL = "",
                            Price = 16.329999999999998,
                            Title = "Book3"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Lakshman",
                            CategoryId = 2,
                            Description = "sdklfshdnfjlksdh",
                            ISBN = "1768AEF",
                            ImageURL = "",
                            Price = 10.109999999999999,
                            Title = "Book4"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Ganesh",
                            CategoryId = 3,
                            Description = "sdklfshdnfjlksdh",
                            ISBN = "986KJLGH",
                            ImageURL = "",
                            Price = 60.299999999999997,
                            Title = "Book5"
                        });
                });

            modelBuilder.Entity("ECommerce.Models.Product", b =>
                {
                    b.HasOne("ECommerce.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
